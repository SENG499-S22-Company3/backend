/* tslint:disable */
/* eslint-disable */
/**
 * algorithm-1
 * This is the Algorithm-1 API endpoint specs for SENG499 Capstone Company 3 & 4.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface Assignment
 */
export interface Assignment {
  /**
   *
   * @type {string}
   * @memberof Assignment
   */
  StartDate: string;
  /**
   *
   * @type {string}
   * @memberof Assignment
   */
  EndDate: string;
  /**
   *
   * @type {string}
   * @memberof Assignment
   */
  BeginTime: string;
  /**
   *
   * @type {string}
   * @memberof Assignment
   */
  EndTime: string;
  /**
   *
   * @type {number}
   * @memberof Assignment
   */
  HoursWeek: number;
  /**
   *
   * @type {boolean}
   * @memberof Assignment
   */
  Sunday: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Assignment
   */
  Monday: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Assignment
   */
  Tuesday: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Assignment
   */
  Wednesday: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Assignment
   */
  Thursday: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Assignment
   */
  Friday: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Assignment
   */
  Saturday: boolean;
}
/**
 *
 * @export
 * @interface Course
 */
export interface Course {
  /**
   *
   * @type {string}
   * @memberof Course
   */
  CourseNumber: string;
  /**
   *
   * @type {string}
   * @memberof Course
   */
  Subject: string;
  /**
   *
   * @type {string}
   * @memberof Course
   */
  SquenceNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Course
   */
  CourseTitle: string;
  /**
   *
   * @type {Array<Assignment>}
   * @memberof Course
   */
  Assignment?: Array<Assignment>;
  /**
   *
   * @type {Array<Professor>}
   * @memberof Course
   */
  Prof?: Array<Professor>;
}
/**
 *
 * @export
 * @interface Preference
 */
export interface Preference {
  /**
   *
   * @type {string}
   * @memberof Preference
   */
  CourseNum: string;
  /**
   *
   * @type {number}
   * @memberof Preference
   */
  PreferenceNum: number;
  /**
   *
   * @type {string}
   * @memberof Preference
   */
  Term?: PreferenceTermEnum;
}

export const PreferenceTermEnum = {
  Fall: 'FALL',
  Spring: 'SPRING',
  Summer: 'SUMMER',
} as const;

export type PreferenceTermEnum =
  typeof PreferenceTermEnum[keyof typeof PreferenceTermEnum];

/**
 *
 * @export
 * @interface Professor
 */
export interface Professor {
  /**
   *
   * @type {Array<Preference>}
   * @memberof Professor
   */
  Preferences: Array<Preference>;
  /**
   *
   * @type {string}
   * @memberof Professor
   */
  DisplayName: string;
  /**
   *
   * @type {number}
   * @memberof Professor
   */
  FallTermCourses?: number;
  /**
   *
   * @type {number}
   * @memberof Professor
   */
  SpringTermCourses?: number;
  /**
   *
   * @type {number}
   * @memberof Professor
   */
  SummerTermCourses?: number;
}
/**
 *
 * @export
 * @interface Schedule
 */
export interface Schedule {
  /**
   *
   * @type {Array<Course>}
   * @memberof Schedule
   */
  fallCourses?: Array<Course>;
  /**
   *
   * @type {Array<Course>}
   * @memberof Schedule
   */
  springCourses?: Array<Course>;
  /**
   *
   * @type {Array<Course>}
   * @memberof Schedule
   */
  summerCourses?: Array<Course>;
}
/**
 *
 * @export
 * @interface ScheduleBody
 */
export interface ScheduleBody {
  /**
   *
   * @type {Array<Schedule>}
   * @memberof ScheduleBody
   */
  hardScheduled?: Array<Schedule>;
  /**
   *
   * @type {Array<Schedule>}
   * @memberof ScheduleBody
   */
  coursesToSchedule?: Array<Schedule>;
  /**
   *
   * @type {Array<Professor>}
   * @memberof ScheduleBody
   */
  professors?: Array<Professor>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Takes 3 inputs and returns 1 to 3 semesters for Fall, Spring, and Summer terms accordingly. Would return semester schedules for filled fields. Therefore, if fall is the only field then the other will be empty.
     * @summary Generate schedule(s)
     * @param {ScheduleBody} scheduleBody This is the request body format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schedulePost: async (
      scheduleBody: ScheduleBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'scheduleBody' is not null or undefined
      assertParamExists('schedulePost', 'scheduleBody', scheduleBody);
      const localVarPath = `/schedule`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        scheduleBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * Takes 3 inputs and returns 1 to 3 semesters for Fall, Spring, and Summer terms accordingly. Would return semester schedules for filled fields. Therefore, if fall is the only field then the other will be empty.
     * @summary Generate schedule(s)
     * @param {ScheduleBody} scheduleBody This is the request body format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async schedulePost(
      scheduleBody: ScheduleBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Schedule>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.schedulePost(
        scheduleBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * Takes 3 inputs and returns 1 to 3 semesters for Fall, Spring, and Summer terms accordingly. Would return semester schedules for filled fields. Therefore, if fall is the only field then the other will be empty.
     * @summary Generate schedule(s)
     * @param {ScheduleBody} scheduleBody This is the request body format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    schedulePost(
      scheduleBody: ScheduleBody,
      options?: any
    ): AxiosPromise<Array<Schedule>> {
      return localVarFp
        .schedulePost(scheduleBody, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * Takes 3 inputs and returns 1 to 3 semesters for Fall, Spring, and Summer terms accordingly. Would return semester schedules for filled fields. Therefore, if fall is the only field then the other will be empty.
   * @summary Generate schedule(s)
   * @param {ScheduleBody} scheduleBody This is the request body format.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public schedulePost(
    scheduleBody: ScheduleBody,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .schedulePost(scheduleBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
