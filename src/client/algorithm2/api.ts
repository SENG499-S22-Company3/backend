/* tslint:disable */
/* eslint-disable */
/**
 * Algorithm 2 API
 * This is an API for SENG499 Capstone Company 3 & 4. The request input body and response output body are identical, the only thing that changes is the \"capacity\" attribute. If it is 0, it will be updated to the Alg\'s predicted value. If it is non-zero, it will not be updated (assumed that it has been manually edited or current prediction should not be updated).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface CourseObject
 */
export interface CourseObject {
  /**
   *
   * @type {string}
   * @memberof CourseObject
   */
  subject: string;
  /**
   *
   * @type {string}
   * @memberof CourseObject
   */
  code: string;
  /**
   * Ratio for number of SENG students to have allocated to the total course size: default 0.75 otherwise input ratio [0-1]
   * @type {number}
   * @memberof CourseObject
   */
  seng_ratio: number;
  /**
   * Which semester this course is to be offered for
   * @type {string}
   * @memberof CourseObject
   */
  semester: CourseObjectSemesterEnum;
  /**
   * Predicted Capacity for a course: default 0 --> Alg2 will predict and replace number, otherwise no prediction and number stays the same in output
   * @type {number}
   * @memberof CourseObject
   */
  capacity: number;
}

export const CourseObjectSemesterEnum = {
  Fall: 'FALL',
  Spring: 'SPRING',
  Summer: 'SUMMER',
} as const;

export type CourseObjectSemesterEnum =
  typeof CourseObjectSemesterEnum[keyof typeof CourseObjectSemesterEnum];

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Given an input list of courses and there class sizes, predict class sizes on classes with no predicted class size yet
     * @summary predicts the class size for input courses
     * @param {Array<CourseObject>} [courseObject] list of classes to predict class sizes for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    predictClassSizes: async (
      courseObject?: Array<CourseObject>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/predict_class_size`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        courseObject,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * Given an input list of courses and there class sizes, predict class sizes on classes with no predicted class size yet
     * @summary predicts the class size for input courses
     * @param {Array<CourseObject>} [courseObject] list of classes to predict class sizes for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async predictClassSizes(
      courseObject?: Array<CourseObject>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<CourseObject>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.predictClassSizes(
          courseObject,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * Given an input list of courses and there class sizes, predict class sizes on classes with no predicted class size yet
     * @summary predicts the class size for input courses
     * @param {Array<CourseObject>} [courseObject] list of classes to predict class sizes for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    predictClassSizes(
      courseObject?: Array<CourseObject>,
      options?: any
    ): AxiosPromise<Array<CourseObject>> {
      return localVarFp
        .predictClassSizes(courseObject, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * Given an input list of courses and there class sizes, predict class sizes on classes with no predicted class size yet
   * @summary predicts the class size for input courses
   * @param {Array<CourseObject>} [courseObject] list of classes to predict class sizes for
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public predictClassSizes(
    courseObject?: Array<CourseObject>,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .predictClassSizes(courseObject, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
