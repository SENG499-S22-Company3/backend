// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                  @id @default(autoincrement())
  username      String               @unique
  password      String
  displayName   String?
  active        Boolean
  hasPeng       Boolean
  role          Role                 @default(USER)
  courseSection CourseSection[]
  preference    TeachingPreference[]
}

model Schedule {
  id            Int             @id @default(autoincrement())
  year          Int
  createdOn     DateTime        @default(now())
  courseSection CourseSection[]
}

model CourseSection {
  id            Int           @id @default(autoincrement())
  hoursPerWeek  Float
  sectionNumber String
  capacity      Int
  startDate     DateTime
  endDate       DateTime
  meetingTime   MeetingTime[]
  user          User?         @relation(fields: [userId], references: [id])
  userId        Int?
  course        Course        @relation(fields: [courseId], references: [id])
  courseId      Int
  schedule      Schedule?     @relation(fields: [scheduleId], references: [id])
  scheduleId    Int?
}

model Course {
  id               Int                @id @default(autoincrement())
  subject          String
  courseCode       String
  title            String
  streamSequence   String
  sengRatio        Float              @default(0.75)
  capacity         Int                @default(0)
  term             Term
  courseSection    CourseSection[]
  coursePreference CoursePreference[]

  @@unique([subject, courseCode, term])
}

model TeachingPreference {
  id                 Int                @id @default(autoincrement())
  coursePreference   CoursePreference[]
  nonTeachingTerm1   Term?
  nonTeachingTerm2   Term?
  hasRelief          Boolean
  reliefReason       String?
  studyLeave         Boolean
  studyLeaveReason   String?
  topicsOrGradCourse Boolean
  topicDescription   String?
  fallTermCourses    Int                @default(2)
  springTermCourses  Int                @default(2)
  summerTermCourses  Int                @default(2)
  User               User?              @relation(fields: [userId], references: [id])
  userId             Int?               @unique

}

model CoursePreference {
  id                Int                 @id @default(autoincrement())
  preference        Int
  course            Course              @relation(fields: [courseId], references: [id])
  courseId          Int
  teachPreference   TeachingPreference? @relation(fields: [teachPreferenceId], references: [id])
  teachPreferenceId Int?

  @@unique([teachPreferenceId, preference, courseId])
}

model MeetingTime {
  id              Int            @id @default(autoincrement())
  startTime       DateTime
  endTime         DateTime
  days            Day[]
  courseSection   CourseSection? @relation(fields: [courseSectionId], references: [id])
  courseSectionId Int?

  @@unique([startTime, endTime, days, courseSectionId])
}

enum Role {
  USER
  ADMIN
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Term {
  FALL
  SPRING
  SUMMER
}
